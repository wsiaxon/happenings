{
  "openapi": "3.0.0",
  "info": {
    "title": "Happenings API",
    "description": "an online platform that provides latest gist, entertainment, sport and politics news that cannot be found anywhere.",
    "contact": {
      "email": "you@your-company.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "description": "Localhost Development Environment",
      "url": "http://localhost:{port}",
      "variables": {
        "port": {
          "enum": [
            "8080",
            "5000"
          ],
          "default": "8080"
        }
      }
    },
    {
      "url": "https://happeningslb-2007236471.eu-west-1.elb.amazonaws.com",
      "description": "Backend API"
    },
    {
      "url": "https://happensapi.herokuapp.com",
      "description": "Test Preview"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "account",
      "description": "Endpoints used in interacting with account info"
    },
    {
      "name": "comments",
      "description": "Endpoints associated with comments on the website"
    },
    {
      "name": "categories",
      "description": "Endpoints associated with categories on the website"
    },
    {
      "name": "stories",
      "description": "Endpoints associated with stories"
    },
    {
      "name": "reports",
      "description": "Endpoints associated with reports on the website"
    },
    {
      "name": "roles",
      "description": "Endpoints used in accessing roles"
    },
    {
      "name": "tags",
      "description": "Endpoints associated with tags"
    },
    {
      "name": "users",
      "description": "Endpoints used in accessing users"
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "sign-in endpoint for users",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "testdeveloper@happenings.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "strongpassword"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. User logged-in successfully."
          },
          "400": {
            "description": "Validation error (incorrect/malformed request)."
          },
          "401": {
            "description": "Unauthorized. Incorrect email or password."
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "signup endpoint for users",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "example": "Test"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Developer"
                  },
                  "email": {
                    "type": "string",
                    "example": "testdeveloper@happenings.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "strongpassword"
                  }
                },
                "required": [
                  "firstName",
                  "lastName",
                  "email",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success. User created successfully."
          },
          "400": {
            "description": "Validation error (incorrect/malformed request)."
          },
          "409": {
            "description": "Conflict. Email used for signup already exist in the database."
          }
        }
      }
    },
    "/auth/verify_email/{token}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Endpoint to verify user email address.",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Verification token sent in the welcome mail after signup.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. User successfully verified."
          },
          "400": {
            "description": "Error. Verification link is invalid/expired or user is already verified."
          }
        }
      }
    },
    "/auth/resend_email": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Endpoint to resend verification email",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "testdeveloper@happenings.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Verification email successfully sent."
          },
          "400": {
            "description": "Bad request. Email is supplied as payload or email is already verified in the database."
          },
          "404": {
            "description": "Error. User with email not found in the database."
          }
        }
      }
    },
    "/auth/forgot_password": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Endpoint to request for a password change in the event a user cannot login with his correct credentials.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "testdeveloper@happenings.com"
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Reset-link sent successfully."
          },
          "400": {
            "description": "Validation error (incorrect/malformed request)."
          },
          "404": {
            "description": "Not Found Error. User with email doesn't exist."
          }
        }
      }
    },
    "/auth/reset_password/{id}/{token}": {
      "patch": {
        "tags": [
          "account"
        ],
        "summary": "Endpoint to change the password for a non logged-in user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user sent as part of the verification token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "path",
            "description": "Verification email sent in email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "example": "strongpassword"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Password updated successfully."
          },
          "404": {
            "description": "Not Found Error. User with email doesn't exist in the database."
          }
        }
      }
    },
    "/auth/change_password": {
      "patch": {
        "tags": [
          "account"
        ],
        "summary": "Endpoint to change the password of a logged-in user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "oldPassword": {
                    "type": "string",
                    "example": "strongpassword"
                  },
                  "newPassword": {
                    "type": "string",
                    "example": "newstrongpassword"
                  }
                },
                "required": [
                  "oldPassword",
                  "newPassword"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Password update was successful."
          },
          "400": {
            "description": "Bad request. \"oldPassword\" does not match user's password in the database or \"oldPassword\" is the same as the \"newPassword\"."
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Endpoint to get all the users in the database.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Users fetched successfully."
          },
          "403": {
            "description": "Forbidden. A non-admin is trying to access endpoint."
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Endpoint to create a user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Michael"
                  },
                  "bio": {
                    "type": "string",
                    "example": "Why we should watch our back..."
                  },
                  "username": {
                    "type": "string",
                    "description": "The username of the user",
                    "example": "user1"
                  },
                  "email": {
                    "type": "string",
                    "description": "The email address of the user",
                    "example": "user@email.com"
                  },
                  "phone": {
                    "type": "string",
                    "description": "The phone number of the user",
                    "example": "08123456789"
                  },
                  "gender": {
                    "type": "string",
                    "enum": [
                      "male",
                      "female"
                    ]
                  },
                  "profilePic": {
                    "type": "string",
                    "description": "The profile picture of the user",
                    "example": "https://placeholder.com/350"
                  },
                  "roles": {
                    "type": "array",
                    "description": "array of roles of the user.",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "Admin",
                      "Developer"
                    ]
                  }
                },
                "required": [
                  "name",
                  "username",
                  "email",
                  "phone",
                  "password",
                  "roles",
                  "gender"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success. Story successfully created."
          },
          "400": {
            "description": "Validation Error. One or more required fields are missing from the requestBody payload"
          },
          "401": {
            "description": "Authorization Error. User making request is not authenticated"
          }
        }
      }
    },
    "/stories": {
      
      "get": {
        "tags": [
          "stories"
        ],
        "summary": "Endpoint to retrieve all the stories based on status. Returns all the stories in the database if status is not supplied.",
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "description": "parameter to retrieve records (based on \"status\" query) from the database",
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "submitted",
                "approved",
                "published",
                "rejected",
                "scheduled"
              ],
              "default": "open"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Stories are successfully retrieved from the database."
          }
        }
      },
      "post": {
        "tags": [
          "stories"
        ],
        "summary": "Endpoint to create a story",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "The quick brown fox jumped over the lazy dog"
                  },
                  "subtitle": {
                    "type": "string",
                    "example": "Why we should watch our back..."
                  },
                  "content": {
                    "type": "string",
                    "description": "The body of the article/story.",
                    "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. At risus viverra adipiscing at in tellus integer feugiat."
                  },
                  "bannerImageUrl": {
                    "type": "string",
                    "description": "The banner image of the story",
                    "example": "https://placeholder.com/350"
                  },
                  "tags": {
                    "type": "array",
                    "description": "array of uuid's representing story 3categories.",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "naija",
                      "erotica"
                    ]
                  },
                  "channel": {
                    "type": "string",
                    "enum": [
                      "BLOG",
                      "TV",
                      "RADIO"
                    ],
                    "default": "BLOG"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "open",
                      "published"
                    ],
                    "default": "open"
                  }
                },
                "required": [
                  "title",
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success. Story successfully created."
          },
          "400": {
            "description": "Validation Error. One or more required fields are missing from the requestBody payload"
          },
          "401": {
            "description": "Authorization Error. User making request is not authenticated"
          }
        }
      }
    },
    "/stories/{id}": {
      "get": {
        "tags": [
          "stories"
        ],
        "summary": "Endpoint to retrieve a story by its id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the story",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Story successfully retrieved."
          },
          "401": {
            "description": "Authorization Error. User making request is not authenticated"
          },
          "404": {
            "description": "Not Found Error. Story with id does not exist in the database."
          }
        }
      },
      "put": {
        "tags": [
          "stories"
        ],
        "summary": "Endpoint to update a story by its id",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Unique identifier (id) of the story",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Story successfully updated."
          },
          "400": {
            "description": "Validation Error."
          },
          "401": {
            "description": "Unauthorized. Request has not been authenticated."
          },
          "403": {
            "description": "Access denied. Story doesn't belong to who is trying to access the resource."
          },
          "404": {
            "description": "Not Found Error. Story with id does not exist in the database."
          }
        }
      }
    },
    "/stories/{slug}": {
      "get": {
        "tags": [
          "stories"
        ],
        "summary": "Endpoint to retrieve a story by its slug",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "Unique URL used to retrieve story from the database.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Story successfully retrieved."
          },
          "401": {
            "description": "Authorization Error. User making request is not authenticated"
          },
          "404": {
            "description": "Not Found Error. Story with slug does not exist in the database."
          }
        }
      },
      "put": {
        "tags": [
          "stories"
        ],
        "summary": "Endpoint to update a story by its slug",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "description": "Unique identifier (slug) of the story",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Story successfully updated."
          },
          "400": {
            "description": "Validation Error."
          },
          "401": {
            "description": "Unauthorized. Request has not been authenticated."
          },
          "403": {
            "description": "Access denied. Story doesn't belong to who is trying to access the resource."
          },
          "404": {
            "description": "Not Found Error. Story with slug does not exist in the database."
          }
        }
      }
    },
    "/roles": {
      
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Endpoint to retrieve all the roles. Returns all the roles in the database.",
        "responses": {
          "200": {
            "description": "Success. Roles are successfully retrieved from the database."
          }
        }
      },
      "post": {
        "tags": [
          "roles"
        ],
        "summary": "Endpoint to create a role",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Author"
                  },
                  "permissions": {
                    "type": "array",
                    "description": "array of permissions of the role.",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "User",
                      "Story.Create"
                    ]
                  }
                },
                "required": [
                  "name",
                  "permissions"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success. Story successfully created."
          },
          "400": {
            "description": "Validation Error. One or more required fields are missing from the requestBody payload"
          },
          "401": {
            "description": "Authorization Error. User making request is not authenticated"
          }
        }
      }
    },
    "/categories": {
      
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "Endpoint to retrieve all the rples. Returns all the categories in the database.",
        "responses": {
          "200": {
            "description": "Success. Roles are successfully retrieved from the database."
          }
        }
      },
      "post": {
        "tags": [
          "categories"
        ],
        "summary": "Endpoint to create a category",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Entertainment"
                  },
                  "slug": {
                    "type": "string"
                  },
                  "parentId": {
                    "type": "number"
                  }
                },
                "required": [
                  "name",
                  "permissions"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success. Story successfully created."
          },
          "400": {
            "description": "Validation Error. One or more required fields are missing from the requestBody payload"
          },
          "401": {
            "description": "Authorization Error. User making request is not authenticated"
          }
        }
      }
    },
    "/tags": {
      
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Endpoint to retrieve all the tags. Returns all the tags in the database.",
        "responses": {
          "200": {
            "description": "Success. Tags are successfully retrieved from the database."
          }
        }
      },
      "post": {
        "tags": [
          "tags"
        ],
        "summary": "Endpoint to create a tag",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Landscape"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success. Tag successfully created."
          },
          "400": {
            "description": "Validation Error. One or more required fields are missing from the requestBody payload"
          },
          "401": {
            "description": "Authorization Error. User making request is not authenticated"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}